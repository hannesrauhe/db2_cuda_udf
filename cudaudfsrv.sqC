#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sqlca.h>
#include <sqludf.h>


float** file_read(int   isBinaryFile,  /* flag: 0 or 1 */
                  char *filename,      /* input file name */
                  int  *numObjs,       /* no. data objects (local) */
                  int  *numCoords)     /* no. coordinates */;
float** cuda_kmeans(float **objects,      /* in: [numObjs][numCoords] */
                   int     numCoords,    /* no. features */
                   int     numObjs,      /* no. objects */
                   int     numClusters,  /* no. clusters */
                   float   threshold,    /* % objects change membership */
                   int    *membership,   /* out: [numObjs] */
                   int    *loop_iterations);

/*----< seq_kmeans() >-------------------------------------------------------*/
/* return an array of cluster centers of size [numClusters][numCoords]       */
float** seq_kmeans(float **objects,      /* in: [numObjs][numCoords] */
                   int     numCoords,    /* no. features */
                   int     numObjs,      /* no. objects */
                   int     numClusters,  /* no. clusters */
                   float   threshold,    /* % objects change membership */
                   int    *membership,   /* out: [numObjs] */
                   int    *loop_iterations);

struct kmeans_scratch
{
  float** clusters;
  int* membership;
  int numClusters, numObjs, numCoords;
  int result_pos;
};

/*
DROP Function KMEANSCOLORUDF;

CREATE FUNCTION KMEANSCOLORUDF(NUMCLUSTERS SMALLINT, DEVICE CHAR(3), TABLE_NAME VARCHAR(255))
RETURNS TABLE(C1 DOUBLE, C2 DOUBLE, C3 DOUBLE, C4 DOUBLE, C5 DOUBLE, C6 DOUBLE, C7 DOUBLE, C8 DOUBLE, C9 DOUBLE)
EXTERNAL NAME 'cudaudfsrv!kmeansColorUDF'
DETERMINISTIC
NO EXTERNAL ACTION
FENCED
NOT NULL CALL
LANGUAGE C
PARAMETER STYLE DB2SQL
SCRATCHPAD
FINAL CALL
DISALLOW PARALLEL
DBINFO

select * from TABLE(KMEANSCOLORUDF(8,'CPU','COLORS100'));
 */
#ifdef __cplusplus
extern "C"
#endif
void SQL_API_FN kmeansColorUDF(// Return row fields
						 //SQLUDF_LOCATOR *inColorTable,
						 SQLUDF_SMALLINT *numClusters,
						 SQLUDF_CHAR *device,
						 SQLUDF_CHAR *table,
						 //out:
                         SQLUDF_DOUBLE *C1,
                         SQLUDF_DOUBLE *C2,
                         SQLUDF_DOUBLE *C3,
                         SQLUDF_DOUBLE *C4,
                         SQLUDF_DOUBLE *C5,
                         SQLUDF_DOUBLE *C6,
                         SQLUDF_DOUBLE *C7,
                         SQLUDF_DOUBLE *C8,
                         SQLUDF_DOUBLE *C9,
                         // Return row field null indicators
                         SQLUDF_SMALLINT *ColorNullInd,
                         SQLUDF_SMALLINT *deviceNullInd,
                         SQLUDF_SMALLINT *tableNullInd,
                         SQLUDF_SMALLINT *C1NullInd,
                         SQLUDF_SMALLINT *C2NullInd,
                         SQLUDF_SMALLINT *C3NullInd,
                         SQLUDF_SMALLINT *C4NullInd,
                         SQLUDF_SMALLINT *C5NullInd,
                         SQLUDF_SMALLINT *C6NullInd,
                         SQLUDF_SMALLINT *C7NullInd,
                         SQLUDF_SMALLINT *C8NullInd,
                         SQLUDF_SMALLINT *C9NullInd,
                         SQLUDF_TRAIL_ARGS_ALL)
{
  struct kmeans_scratch *pScratArea;
  pScratArea = (struct kmeans_scratch *)SQLUDF_SCRAT->data;
  pScratArea->numCoords = 9;

  // SQLUDF_CALLT, SQLUDF_SCRAT, SQLUDF_STATE and SQLUDF_MSGTX are
  // parts of SQLUDF_TRAIL_ARGS_ALL
  switch (SQLUDF_CALLT)
  {
    case SQLUDF_TF_OPEN:
    {
		int     loop_iterations = 0;
		float   threshold = 0.001;
		float **objects;
		struct sqlca sqlca;
		
		
		pScratArea->numClusters = *numClusters;

		if(strncmp("CSV:",table,4)==0) {
			objects = file_read(0, table+4, &(pScratArea->numObjs), &(pScratArea->numCoords));
		} else if(strncmp("BIN:",table,4)==0) {
			objects = file_read(1, table+4, &(pScratArea->numObjs), &(pScratArea->numCoords));
		} else {
			EXEC SQL BEGIN DECLARE SECTION;
			       char strStmt[1000];
				   int count;
				   short countInd;
				   double c1;
				   short c1Ind;
				   double c2;
				   short c2Ind;
				   double c3;
				   short c3Ind;
				   double c4;
				   short c4Ind;
				   double c5;
				   short c5Ind;
				   double c6;
				   short c6Ind;
				   double c7;
				   short c7Ind;
				   double c8;
				   short c8Ind;
				   double c9;
				   short c9Ind;
			EXEC SQL END DECLARE SECTION;

			sprintf(strStmt,"SELECT COUNT(*) AS count FROM %s",table);

			EXEC SQL PREPARE stmt10 FROM :strStmt;

			EXEC SQL DECLARE c40 CURSOR FOR	stmt10;


			EXEC SQL OPEN c40;
			if (sqlca.sqlcode != 0) {
			   strcpy(SQLUDF_STATE, "38610");
			   sprintf(SQLUDF_MSGTX, "Count cursor failed on %s, SQLCODE=%d.", table, SQLCODE);
			   return;
			}

			EXEC SQL FETCH c40 INTO :count :countInd;
			if (sqlca.sqlcode != 0) {
			   strcpy(SQLUDF_STATE, "38610");
			   sprintf(SQLUDF_MSGTX, "Fetch Count failed with SQLCODE = %d.",  SQLCODE);
			   return;
			}
			EXEC SQL CLOSE c40;
			pScratArea->numObjs = count;
			objects    = (float**)malloc(pScratArea->numObjs * sizeof(float*));
			objects[0] = (float*) malloc(pScratArea->numObjs * pScratArea->numCoords * sizeof(float));


			sprintf(strStmt,"SELECT C1,C2,C3,C4,C5,C6,C7,C8,C9	FROM %s",table);

			EXEC SQL PREPARE stmt20 FROM :strStmt;

			EXEC SQL DECLARE c50 CURSOR FOR stmt20;

			EXEC SQL OPEN c50;
			if (sqlca.sqlcode != 0) {
			   strcpy(SQLUDF_STATE, "38610");
			   sprintf(SQLUDF_MSGTX, "Open data fetch cursor failed with SQLCODE = %d.",  SQLCODE);
			   return;
			}

			EXEC SQL FETCH c50 INTO :c1 :c1Ind, :c2 :c2Ind, :c3 :c3Ind, :c4 :c4Ind, :c5 :c5Ind, :c6 :c6Ind, :c7 :c7Ind, :c8 :c8Ind, :c9 :c9Ind;
			if (sqlca.sqlcode != 0) {
			   strcpy(SQLUDF_STATE, "38610");
			   sprintf(SQLUDF_MSGTX, "First fetch failed with SQLCODE = %d.",  SQLCODE);
			   return;
			}
			objects[0][0]=c1; objects[0][1]=c2; objects[0][2]=c3;
			objects[0][3]=c4; objects[0][4]=c5; objects[0][5]=c6;
			objects[0][6]=c7; objects[0][7]=c8; objects[0][8]=c9;
			for(int i=1;i<pScratArea->numObjs;++i) {
				objects[i] = objects[i-1] + (pScratArea->numCoords);
				EXEC SQL FETCH c50 INTO :c1 :c1Ind, :c2 :c2Ind, :c3 :c3Ind, :c4 :c4Ind, :c5 :c5Ind, :c6 :c6Ind, :c7 :c7Ind, :c8 :c8Ind, :c9 :c9Ind;
				if (sqlca.sqlcode != 0) {
				   strcpy(SQLUDF_STATE, "38610");
				   sprintf(SQLUDF_MSGTX, "Fetch failed with SQLCODE = %d.",  SQLCODE);
				   return;
				}
				objects[i][0]=c1; objects[i][1]=c2; objects[i][2]=c3;
				objects[i][3]=c4; objects[i][4]=c5; objects[i][5]=c6;
				objects[i][6]=c7; objects[i][7]=c8; objects[i][8]=c9;
			}
			EXEC SQL CLOSE c50;
			if (sqlca.sqlcode != 0) {
			   strcpy(SQLUDF_STATE, "38610");
			   sprintf(SQLUDF_MSGTX, "Closing data cursor failed with SQLCODE = %d.",  SQLCODE);
			   return;
			}
		}

		if(objects==NULL || objects[0]==NULL) {
			const char* t=table;
			if(strlen(table+4)>30) {
				t=table+4+strlen(table)-30;
			}
			strcpy(SQLUDF_STATE, "38999");
			sprintf(SQLUDF_MSGTX, "OPENING FILE ERROR: %s (crop)",t);
		} else {
			pScratArea->membership = (int*) malloc(pScratArea->numObjs * sizeof(int));
		
			if(strcmp(device,"GPU") == 0) {
				pScratArea->clusters = cuda_kmeans(objects, pScratArea->numCoords, pScratArea->numObjs, pScratArea->numClusters, threshold,
								pScratArea->membership, &loop_iterations);
		//				pScratArea->clusters[0][0] = cuda_test();
			} else {
				pScratArea->clusters = seq_kmeans(objects, pScratArea->numCoords, pScratArea->numObjs, pScratArea->numClusters, threshold,
						pScratArea->membership, &loop_iterations);
			}
		
			free(objects[0]);
			free(objects);
			if(pScratArea->clusters==NULL) {
				strcpy(SQLUDF_STATE, "38998");
				strcpy(SQLUDF_MSGTX, "KMEANS ERROR");
			}
		}
		
		pScratArea->result_pos = 0;
		
		break;
    }
    case SQLUDF_TF_FETCH:
      if (pScratArea->result_pos >= pScratArea->numClusters)
      {
        // SQLUDF_STATE is part of SQLUDF_TRAIL_ARGS_ALL
        strcpy(SQLUDF_STATE, "02000");
        break;
      }
      // Normal call UDF: Fetch next row
      *C1 = (double)pScratArea->clusters[pScratArea->result_pos][0];
      *C2 = (double)pScratArea->clusters[pScratArea->result_pos][1];
      *C3 = (double)pScratArea->clusters[pScratArea->result_pos][2];
      *C4 = (double)pScratArea->clusters[pScratArea->result_pos][3];
      *C5 = (double)pScratArea->clusters[pScratArea->result_pos][4];
      *C6 = (double)pScratArea->clusters[pScratArea->result_pos][5];
      *C7 = (double)pScratArea->clusters[pScratArea->result_pos][6];
      *C8 = (double)pScratArea->clusters[pScratArea->result_pos][7];
      *C9 = (double)pScratArea->clusters[pScratArea->result_pos][8];
/*
    	if(pScratArea->result_pos>=1) {
    	      strcpy(SQLUDF_STATE, "02000");
    		break;
    	}
        *C1 = pScratArea->numObjs;
        *C2 = pScratArea->numClusters;
        *C3 = pScratArea->numCoords;
        *C4 = 0;
        *C5 =0;
        *C6 = 0;
        *C7 = 0;
        *C8 = 0;
        *C9 = 0;*/
      // Next row of data
      pScratArea->result_pos++;
      strcpy(SQLUDF_STATE, "00000");
      break;
    case SQLUDF_TF_CLOSE:
        free(pScratArea->membership);
        free(pScratArea->clusters[0]);
        free(pScratArea->clusters);
      break;
    case SQLUDF_TF_FINAL:
      break;
  }
} //kmeansColorUDF



/*
DROP Function KMEANSCOLORSTATICUDF;

CREATE FUNCTION KMEANSCOLORSTATICUDF(NUMCLUSTERS SMALLINT, DEVICE CHAR(3))
RETURNS TABLE(C1 DOUBLE, C2 DOUBLE, C3 DOUBLE, C4 DOUBLE, C5 DOUBLE, C6 DOUBLE, C7 DOUBLE, C8 DOUBLE, C9 DOUBLE)
EXTERNAL NAME 'cudaudfsrv!kmeansColorStaticUDF'
DETERMINISTIC
NO EXTERNAL ACTION
FENCED
NOT NULL CALL
LANGUAGE C
PARAMETER STYLE DB2SQL
SCRATCHPAD
FINAL CALL
DISALLOW PARALLEL
DBINFO

select * from TABLE(KMEANSCOLORSTATICUDF(8,'CPU'));
 */
#ifdef __cplusplus
extern "C"
#endif
void SQL_API_FN kmeansColorStaticUDF(// Return row fields
						 SQLUDF_SMALLINT *numClusters,
						 SQLUDF_CHAR *device,
						 //out:
                         SQLUDF_DOUBLE *C1,
                         SQLUDF_DOUBLE *C2,
                         SQLUDF_DOUBLE *C3,
                         SQLUDF_DOUBLE *C4,
                         SQLUDF_DOUBLE *C5,
                         SQLUDF_DOUBLE *C6,
                         SQLUDF_DOUBLE *C7,
                         SQLUDF_DOUBLE *C8,
                         SQLUDF_DOUBLE *C9,
                         // Return row field null indicators
                         SQLUDF_SMALLINT *ColorNullInd,
                         SQLUDF_SMALLINT *deviceNullInd,
                         SQLUDF_SMALLINT *C1NullInd,
                         SQLUDF_SMALLINT *C2NullInd,
                         SQLUDF_SMALLINT *C3NullInd,
                         SQLUDF_SMALLINT *C4NullInd,
                         SQLUDF_SMALLINT *C5NullInd,
                         SQLUDF_SMALLINT *C6NullInd,
                         SQLUDF_SMALLINT *C7NullInd,
                         SQLUDF_SMALLINT *C8NullInd,
                         SQLUDF_SMALLINT *C9NullInd,
                         SQLUDF_TRAIL_ARGS_ALL)
{
  struct kmeans_scratch *pScratArea;
  pScratArea = (struct kmeans_scratch *)SQLUDF_SCRAT->data;
  pScratArea->numCoords = 9;

  // SQLUDF_CALLT, SQLUDF_SCRAT, SQLUDF_STATE and SQLUDF_MSGTX are
  // parts of SQLUDF_TRAIL_ARGS_ALL
  switch (SQLUDF_CALLT)
  {
    case SQLUDF_TF_OPEN:
    {
		int     loop_iterations = 0;
		float   threshold = 0.001;
		float **objects;
		struct sqlca sqlca;
//		char strStmt[1000];


		pScratArea->numClusters = *numClusters;

		EXEC SQL BEGIN DECLARE SECTION;
			   int count;
			   short countInd;
			   double c1;
			   short c1Ind;
			   double c2;
			   short c2Ind;
			   double c3;
			   short c3Ind;
			   double c4;
			   short c4Ind;
			   double c5;
			   short c5Ind;
			   double c6;
			   short c6Ind;
			   double c7;
			   short c7Ind;
			   double c8;
			   short c8Ind;
			   double c9;
			   short c9Ind;
		EXEC SQL END DECLARE SECTION;


		EXEC SQL DECLARE c41 CURSOR FOR	SELECT COUNT(*) AS count FROM COLORS;


		EXEC SQL OPEN c41;
		if (sqlca.sqlcode != 0) {
		   strcpy(SQLUDF_STATE, "38610");
		   sprintf(SQLUDF_MSGTX, "Count cursor failed on COLORS, SQLCODE=%d.", SQLCODE);
		   return;
		}

		EXEC SQL FETCH c41 INTO :count :countInd;
		if (sqlca.sqlcode != 0) {
		   strcpy(SQLUDF_STATE, "38610");
		   sprintf(SQLUDF_MSGTX, "Fetch Count failed with SQLCODE = %d.",  SQLCODE);
		   return;
		}
		EXEC SQL CLOSE c41;
		pScratArea->numObjs = count;
		objects    = (float**)malloc(pScratArea->numObjs * sizeof(float*));
		objects[0] = (float*) malloc(pScratArea->numObjs * pScratArea->numCoords * sizeof(float));


		EXEC SQL DECLARE c51 CURSOR FOR SELECT C1,C2,C3,C4,C5,C6,C7,C8,C9 FROM COLORS;

		EXEC SQL OPEN c51;
		if (sqlca.sqlcode != 0) {
		   strcpy(SQLUDF_STATE, "38610");
		   sprintf(SQLUDF_MSGTX, "Open data fetch cursor failed with SQLCODE = %d.",  SQLCODE);
		   return;
		}

		EXEC SQL FETCH c51 INTO :c1 :c1Ind, :c2 :c2Ind, :c3 :c3Ind, :c4 :c4Ind, :c5 :c5Ind, :c6 :c6Ind, :c7 :c7Ind, :c8 :c8Ind, :c9 :c9Ind;
		if (sqlca.sqlcode != 0) {
		   strcpy(SQLUDF_STATE, "38610");
		   sprintf(SQLUDF_MSGTX, "First fetch failed with SQLCODE = %d.",  SQLCODE);
		   return;
		}
		objects[0][0]=c1; objects[0][1]=c2; objects[0][2]=c3;
		objects[0][3]=c4; objects[0][4]=c5; objects[0][5]=c6;
		objects[0][6]=c7; objects[0][7]=c8; objects[0][8]=c9;
		for(int i=1;i<pScratArea->numObjs;++i) {
			objects[i] = objects[i-1] + (pScratArea->numCoords);
			EXEC SQL FETCH c51 INTO :c1 :c1Ind, :c2 :c2Ind, :c3 :c3Ind, :c4 :c4Ind, :c5 :c5Ind, :c6 :c6Ind, :c7 :c7Ind, :c8 :c8Ind, :c9 :c9Ind;
			if (sqlca.sqlcode != 0) {
			   strcpy(SQLUDF_STATE, "38610");
			   sprintf(SQLUDF_MSGTX, "Fetch failed with SQLCODE = %d.",  SQLCODE);
			   return;
			}
			objects[i][0]=c1; objects[i][1]=c2; objects[i][2]=c3;
			objects[i][3]=c4; objects[i][4]=c5; objects[i][5]=c6;
			objects[i][6]=c7; objects[i][7]=c8; objects[i][8]=c9;
		}
		EXEC SQL CLOSE c51;
		if (sqlca.sqlcode != 0) {
		   strcpy(SQLUDF_STATE, "38610");
		   sprintf(SQLUDF_MSGTX, "Closing data cursor failed with SQLCODE = %d.",  SQLCODE);
		   return;
		}

		pScratArea->membership = (int*) malloc(pScratArea->numObjs * sizeof(int));

		if(strcmp(device,"GPU") == 0) {
			pScratArea->clusters = cuda_kmeans(objects, pScratArea->numCoords, pScratArea->numObjs, pScratArea->numClusters, threshold,
							pScratArea->membership, &loop_iterations);
		} else {
			pScratArea->clusters = seq_kmeans(objects, pScratArea->numCoords, pScratArea->numObjs, pScratArea->numClusters, threshold,
					pScratArea->membership, &loop_iterations);
		}

		free(objects[0]);
		free(objects);
		if(pScratArea->clusters==NULL) {
			strcpy(SQLUDF_STATE, "38998");
			strcpy(SQLUDF_MSGTX, "KMEANS ERROR");
		}

		pScratArea->result_pos = 0;

		break;
    }
    case SQLUDF_TF_FETCH:
      if (pScratArea->result_pos >= pScratArea->numClusters)
      {
        // SQLUDF_STATE is part of SQLUDF_TRAIL_ARGS_ALL
        strcpy(SQLUDF_STATE, "02000");
        break;
      }
      // Normal call UDF: Fetch next row
      *C1 = (double)pScratArea->clusters[pScratArea->result_pos][0];
      *C2 = (double)pScratArea->clusters[pScratArea->result_pos][1];
      *C3 = (double)pScratArea->clusters[pScratArea->result_pos][2];
      *C4 = (double)pScratArea->clusters[pScratArea->result_pos][3];
      *C5 = (double)pScratArea->clusters[pScratArea->result_pos][4];
      *C6 = (double)pScratArea->clusters[pScratArea->result_pos][5];
      *C7 = (double)pScratArea->clusters[pScratArea->result_pos][6];
      *C8 = (double)pScratArea->clusters[pScratArea->result_pos][7];
      *C9 = (double)pScratArea->clusters[pScratArea->result_pos][8];
/*
    	if(pScratArea->result_pos>=1) {
    	      strcpy(SQLUDF_STATE, "02000");
    		break;
    	}
        *C1 = pScratArea->numObjs;
        *C2 = pScratArea->numClusters;
        *C3 = pScratArea->numCoords;
        *C4 = 0;
        *C5 =0;
        *C6 = 0;
        *C7 = 0;
        *C8 = 0;
        *C9 = 0;*/
      // Next row of data
      pScratArea->result_pos++;
      strcpy(SQLUDF_STATE, "00000");
      break;
    case SQLUDF_TF_CLOSE:
        free(pScratArea->membership);
        free(pScratArea->clusters[0]);
        free(pScratArea->clusters);
      break;
    case SQLUDF_TF_FINAL:
      break;
  }
} //kmeansColorStaticUDF
