#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <sqlenv.h>
#include "utilemb.h"
#include <sys/types.h>  /* open() */
#include <sys/stat.h>
#include <fcntl.h>
#if ((__cplusplus >= 199711L) && !defined DB2HP && !defined DB2AIX) || \
    (DB2LINUX && (__LP64__ || (__GNUC__ >= 3)) )
   #include <iomanip>
   #include <iostream>
   using namespace std;
#else
   #include <iomanip.h>
   #include <iostream.h>
#endif

#include <locale>

/*---< file_read() >---------------------------------------------------------*/
float** file_read(int   isBinaryFile,  /* flag: 0 or 1 */
                  char *filename,      /* input file name */
                  int  *numObjs,       /* no. data objects (local) */
                  int  *numCoords)     /* no. coordinates */
{
    float **objects;
    int     i, j, len;
    ssize_t numBytesRead;

    if (isBinaryFile) {  /* input file is in raw binary format -------------*/
        int infile;
        if ((infile = open(filename, O_RDONLY, "0600")) == -1) {
            fprintf(stderr, "Error: no such file (%s)\n", filename);
            return NULL;
        }
        numBytesRead = read(infile, numObjs,    sizeof(int));
//        assert(numBytesRead == sizeof(int));
        numBytesRead = read(infile, numCoords, sizeof(int));
//        assert(numBytesRead == sizeof(int));

        /* allocate space for objects[][] and read all objects */
        len = (*numObjs) * (*numCoords);
        objects    = (float**)malloc((*numObjs) * sizeof(float*));
//        assert(objects != NULL);
        objects[0] = (float*) malloc(len * sizeof(float));
//        assert(objects[0] != NULL);
        for (i=1; i<(*numObjs); i++)
            objects[i] = objects[i-1] + (*numCoords);

        numBytesRead = read(infile, objects[0], len*sizeof(float));
//        assert(numBytesRead == len*sizeof(float));

        close(infile);
    }

    return objects;
}

int main(int argc, char **argv) {
	int     numClusters, numCoords, numObjs;
	float** objects;
	DbEmb db;
	struct sqlca sqlca;
	
	printf ("Locale is: %s\n", setlocale(LC_ALL,NULL) );
	setlocale(LC_ALL, "");
	setlocale(LC_NUMERIC, "en_US.UTF-8");
	printf ("Locale is: %s\n", setlocale(LC_ALL,NULL) );

	if(argc<2) {
		printf("USAGE: %s <filename> [-txt]\n",argv[0]);
		printf("if -txt specified, the file under <filename> will be converted to txt\n");
		printf("else its content will be inserted into the database\n");
		return -1;
	}
	objects = file_read(1, argv[1], &numObjs, &numCoords);

	if(numCoords!=9) {
		printf("Wrong number of coords in file\n");
		return -1;
	}
	
	
	if(argc>2 && strcmp(argv[2],"-txt")==0) {
		FILE *fptr;
		int   i, j;
		char  outFileName[1024];
		sprintf(outFileName, "%s.txt", argv[1]);
		printf("Writing coordinates to file \"%s\"\n", outFileName);
		fptr = fopen(outFileName, "w");
		for (i=0; i<numObjs; i++) {
		    fprintf(fptr, "%d ", i+1);
		    for (j=0; j<numCoords; j++)
		        fprintf(fptr, "%f ", objects[i][j]);
		    fprintf(fptr, "\n");
		}
		fclose(fptr);	
	} else {
		db.setDb("kmeans", "", "");
	
		db.Connect();
		EXEC SQL DROP TABLE colors;
	
		cout << "\n  Register table." << endl;
	
		  EXEC SQL CREATE TABLE
		    COLORS(C1 DOUBLE, C2 DOUBLE, C3 DOUBLE, C4 DOUBLE, C5 DOUBLE, C6 DOUBLE, C7 DOUBLE, C8 DOUBLE, C9 DOUBLE);
		  EMB_SQL_CHECK("create table");
	
		char strStmt[1000];  
		for(int i=0;i<numObjs;++i) {
			sprintf(strStmt, "INSERT INTO colors(C1,C2,C3,C4,C5,C6,C7,C8,C9) VALUES(%f,%f,%f,%f,%f,%f,%f,%f,%f)\n",objects[0][i*numCoords+0],objects[0][i*numCoords+1],objects[0][i*numCoords+2],
																objects[0][i*numCoords+3],objects[0][i*numCoords+4],objects[0][i*numCoords+5],
																objects[0][i*numCoords+6],objects[0][i*numCoords+7],objects[0][i*numCoords+8]);
			if(!i) {		
				printf("executing %d statements such as this:\n %s\n",numObjs,strStmt);
			}
			EXEC SQL EXECUTE IMMEDIATE :strStmt;
		}
		EMB_SQL_CHECK("scalar UDF 'Convert' -- populate table");
		
		cout << "\n  COMMIT.\n";
		
		EXEC SQL COMMIT;
	
		db.Disconnect();
	}
}
